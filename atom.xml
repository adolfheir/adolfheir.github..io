<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习，天天向上</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://adolfheir.github.io/"/>
  <updated>2019-08-22T13:51:13.393Z</updated>
  <id>https://adolfheir.github.io/</id>
  
  <author>
    <name>一天只吃一颗糖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三方技术选型</title>
    <link href="https://adolfheir.github.io/2019/08/22/%E4%B8%89%E6%96%B9%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    <id>https://adolfheir.github.io/2019/08/22/三方技术选型/</id>
    <published>2019-08-22T12:32:56.000Z</published>
    <updated>2019-08-22T13:51:13.393Z</updated>
    
    <content type="html"><![CDATA[<p>web开发实践中最佳三方库整理<br><a id="more"></a><br>每个轮子都有很多个实现，但是最好的就那几个，这边整理下遇到的react使用中最好的轮子。</p><h4 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h4><table><thead><tr><th>分类</th><th>名称</th></tr></thead><tbody><tr><td>编辑器</td><td>vscode，webstorem</td></tr><tr><td>包管理</td><td>yarn</td></tr><tr><td>基础框架</td><td>react</td></tr><tr><td>其他常规内容</td><td>webpack，babel，rollup</td></tr></tbody></table><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><table><thead><tr><th>分类</th><th>名称</th></tr></thead><tbody><tr><td>图形化</td><td>echart(<a href="https://echarts.baidu.com/" target="_blank" rel="noopener">https://echarts.baidu.com/</a>)</td></tr><tr><td>拖拽</td><td>react-dnd<br>react-beautiful-dnd 偏应用层</td></tr><tr><td>代码编辑器</td><td><em>react-ace +</em> brace  首选底层ace<br>react-monaco-editor 调研中 底层monaco-editor<br>react-live 编辑+动态渲染方案<br><a href="https://github.com/mac-s-g/react-json-view" target="_blank" rel="noopener">react-json-view</a>  json编辑器</td></tr><tr><td>地图</td><td><a href="https://github.com/ElemeFE/react-amap" target="_blank" rel="noopener">react-amap</a></td></tr><tr><td>终端</td><td><a href="https://github.com/xtermjs/xterm.js" target="_blank" rel="noopener">xterm.js</a></td></tr><tr><td>富文本</td><td><a href="https://github.com/margox/braft-editor" target="_blank" rel="noopener">braft-editor</a></td></tr><tr><td>代码高亮</td><td><a href="https://github.com/conorhastings/react-syntax-highlighter" target="_blank" rel="noopener">react-syntax-highlighter</a></td></tr><tr><td>markdown渲染</td><td>react-markdown</td></tr><tr><td>无限滚动</td><td><a href="https://github.com/bvaughn/react-window" target="_blank" rel="noopener">React-window</a></td></tr><tr><td>webide</td><td>theia-ide</td></tr><tr><td>右键菜单</td><td><a href="https://fkhadra.github.io/react-contexify/" target="_blank" rel="noopener">react-contexify</a></td></tr><tr><td>区域拖拽</td><td>react-split-pane</td></tr><tr><td>图片截选</td><td><a href="https://github.com/DominicTobias/react-image-crop" target="_blank" rel="noopener">react-image-crop</a></td></tr><tr><td>趋势线</td><td><a href="https://github.com/borisyankov/react-sparklines" target="_blank" rel="noopener">react-sparklines</a></td></tr><tr><td>搜索词高亮</td><td><a href="https://github.com/bvaughn/react-highlight-words" target="_blank" rel="noopener">react-highlight-words</a></td></tr><tr><td>动效</td><td><a href="https://github.com/react-spring/react-spring" target="_blank" rel="noopener">react-spring</a></td></tr><tr><td>取色版</td><td><a href="http://casesandberg.github.io/react-color/" target="_blank" rel="noopener">react-color</a></td></tr><tr><td>响应式支持</td><td><a href="https://github.com/contra/react-responsive" target="_blank" rel="noopener">react-responsive</a></td></tr></tbody></table><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><table><thead><tr><th>分类</th><th>名称</th></tr></thead><tbody><tr><td>css解决方案</td><td>BEM+classname+sass</td></tr><tr><td>网络请求</td><td>axios/fetch</td></tr><tr><td>基础工具库</td><td>lodash</td></tr><tr><td>复制</td><td><a href="https://github.com/nkbt/react-copy-to-clipboard" target="_blank" rel="noopener">react-copy-to-clipboard</a></td></tr><tr><td>页面meta属性</td><td><a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a></td></tr><tr><td>二维码</td><td><a href="https://github.com/zpao/qrcode.react" target="_blank" rel="noopener">qrcode.react</a></td></tr><tr><td>顶部进度条</td><td><a href="https://github.com/rstacruz/nprogress" target="_blank" rel="noopener">nprogress</a></td></tr><tr><td>时间处理</td><td>moment</td></tr><tr><td>国际化</td><td><a href="https://github.com/yahoo/react-intl" target="_blank" rel="noopener">react-intl</a></td></tr><tr><td>文本输入优化</td><td><a href="https://github.com/text-mask/text-mask" target="_blank" rel="noopener">text-mask</a></td></tr><tr><td>路由处理</td><td><em>history</em></td></tr><tr><td>query string处理</td><td>qs</td></tr><tr><td>react属性校验</td><td><em>prop-types</em></td></tr><tr><td>生成唯一uid</td><td><a href="https://github.com/ericelliott/cuid" target="_blank" rel="noopener">cuid</a></td></tr><tr><td>数字处理</td><td><a href="http://mikemcl.github.io/big.js/#abs" target="_blank" rel="noopener">big.js</a></td></tr><tr><td>json schema校验</td><td><a href="https://github.com/epoberezkin/ajv" target="_blank" rel="noopener">ajv</a></td></tr><tr><td>计算最佳匹配工具</td><td><a href="https://github.com/dcporter/didyoumean.js" target="_blank" rel="noopener">didyoumean.js</a></td></tr><tr><td>csv处理</td><td><a href="https://github.com/react-csv/react-csv" target="_blank" rel="noopener">react-csv</a></td></tr><tr><td>Base64处理</td><td><a href="https://github.com/dcporter/didyoumean.js" target="_blank" rel="noopener"><a href="https://github.com/dankogai/js-base64" target="_blank" rel="noopener">js-base64</a></a></td></tr><tr><td>zip处理</td><td><a href="https://github.com/Stuk/jszip" target="_blank" rel="noopener">jszip</a></td></tr><tr><td>md5计算</td><td><a href="https://github.com/forsigner/browser-md5-file" target="_blank" rel="noopener">browser-md5-file</a></td></tr><tr><td>eccel处理</td><td><a href="https://github.com/SheetJS/js-xlsx" target="_blank" rel="noopener">js-xlsx</a></td></tr></tbody></table><p>#### </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web开发实践中最佳三方库整理&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="https://adolfheir.github.io/categories/others/"/>
    
    
      <category term="技术选型，react" scheme="https://adolfheir.github.io/tags/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%EF%BC%8Creact/"/>
    
  </entry>
  
  <entry>
    <title>webpack添加版本号</title>
    <link href="https://adolfheir.github.io/2018/12/13/webpack%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>https://adolfheir.github.io/2018/12/13/webpack添加版本号/</id>
    <published>2018-12-13T08:03:09.000Z</published>
    <updated>2019-08-22T13:51:13.383Z</updated>
    
    <content type="html"><![CDATA[<p>node读取git的commit的版本号借助webpack来输出当前项目版本号<br><a id="more"></a><br>起因是公司使用自动化部署的时候不知道因为一些原因，不知道当前线上是否使用了最新版的前端代码.所以有一个给前端项目添加版本号的需求.于是就使用了webpack读取git的commit的版本号来输出当前项目版本号</p><h2 id="获取git信息"><a href="#获取git信息" class="headerlink" title="获取git信息"></a>获取git信息</h2><p>百度了一波，直接用node 读当前项目的.git文件下的信息就好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取git版本</span></span><br><span class="line"><span class="keyword">let</span> getGitVersion = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> gitHEAD = fs.readFileSync(<span class="string">'.git/HEAD'</span>, <span class="string">'utf-8'</span>).trim() <span class="comment">// ref: refs/heads/develop</span></span><br><span class="line">  <span class="keyword">let</span> ref = gitHEAD.split(<span class="string">': '</span>)[<span class="number">1</span>] <span class="comment">// refs/heads/develop</span></span><br><span class="line">  <span class="keyword">let</span> develop = gitHEAD.split(<span class="string">'/'</span>)[<span class="number">2</span>] <span class="comment">// 环境：develop</span></span><br><span class="line">  <span class="keyword">let</span> gitVersion = fs.readFileSync(<span class="string">'.git/'</span> + ref, <span class="string">'utf-8'</span>).trim() <span class="comment">// git版本号，例如：6ceb0ab5059d01fd444cf4e78467cc2dd1184a66</span></span><br><span class="line">  <span class="keyword">let</span> gitCommitVersion = <span class="string">'"'</span> + develop + <span class="string">': '</span> + gitVersion + <span class="string">'"'</span> <span class="comment">// 例如dev环境: "develop: 6ceb0ab5059d01fd444cf4e78467cc2dd1184a66"</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    gitBranch: <span class="string">'"'</span> + develop + <span class="string">'"'</span>,</span><br><span class="line">    gitVersion: <span class="string">'"'</span> + gitVersion + <span class="string">'"'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="使用webpack添加环境变量"><a href="#使用webpack添加环境变量" class="headerlink" title="使用webpack添加环境变量"></a>使用webpack添加环境变量</h2><p>直接使用webpack自带的DefinePlugin 注入上面生成的version信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">  <span class="string">"process"</span>: &#123;</span><br><span class="line">    <span class="string">"env"</span>: &#123; ...getGitVersion &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="打印到控制台"><a href="#打印到控制台" class="headerlink" title="打印到控制台"></a>打印到控制台</h2><p>然后在项目入口文件 打印process 对象获取到的版本信息 (下面一些奇怪的东西是console美化)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`%cGit_Branch:%c<span class="subst">$&#123;process.env.gitBranch&#125;</span>`</span>, <span class="string">"color:orange;font-weight:bold;font-size:16px"</span>, <span class="string">"color:red;font-size:16px"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`%cGit_Version:%c<span class="subst">$&#123;process.env.gitVersion&#125;</span>`</span>, <span class="string">"color:orange;font-weight:bold;font-size:16px"</span>, <span class="string">"color:red;font-size:16px"</span>)</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>因为build的时候获取的版本号是当前这次的提交 所以如果build完提交后console的版本号就不是最后一次提交了,所以要不就线上build，不然就只能接受这个小瑕疵。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node读取git的commit的版本号借助webpack来输出当前项目版本号&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="https://adolfheir.github.io/categories/others/"/>
    
    
      <category term="tool" scheme="https://adolfheir.github.io/tags/tool/"/>
    
      <category term="webpack" scheme="https://adolfheir.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-树</title>
    <link href="https://adolfheir.github.io/2018/12/11/tree/"/>
    <id>https://adolfheir.github.io/2018/12/11/tree/</id>
    <published>2018-12-11T07:48:11.000Z</published>
    <updated>2019-08-22T13:51:13.382Z</updated>
    
    <content type="html"><![CDATA[<p>树的结点包含一个数据和多个指向子树的分支 结点拥有的子树的数量为结点的度，度为0的结点是叶结点，度不为0的结点为分支结点，树的度定义为树的所有结点中度的最大值。。。</p><a id="more"></a><h2 id="普通树"><a href="#普通树" class="headerlink" title="普通树"></a>普通树</h2><h3 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h3><h4 id="树的度"><a href="#树的度" class="headerlink" title="树的度"></a>树的度</h4><p>树的结点包含一个数据和多个指向子树的分支 结点拥有的子树的数量为结点的度，度为0的结点是叶结点，度不为0的结点为分支结点，树的度定义为树的所有结点中度的最大值。</p><h4 id="树的前驱和后继"><a href="#树的前驱和后继" class="headerlink" title="树的前驱和后继"></a>树的前驱和后继</h4><p>结点的直接后继称为结点的孩子，结点称为孩子的双亲。 结点的孩子的孩子称为结点的孙子，结点称为子孙的祖先。 同一个双亲的孩子之间互称兄弟。</p><h4 id="树中结点的层次"><a href="#树中结点的层次" class="headerlink" title="树中结点的层次"></a>树中结点的层次</h4><p>树中根结点为第1层，根结点的孩子为第2层，依次类推。 树中结点的最大层次称为树的深度或高度</p><h4 id="树的有序性"><a href="#树的有序性" class="headerlink" title="树的有序性"></a>树的有序性</h4><p>如果树中结点的各子树从左向右是有序的，子树间不能互换位置，则称该树为有序树，否则为无序树。 </p><h4 id="森林"><a href="#森林" class="headerlink" title="森林"></a>森林</h4><p>森林是由n棵互不相交的树组成的集合。 三棵树组成的森林如下： </p><h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><p>树的遍历分为递归和非递归广度优先   非递归深度优先</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dfs 递归</span></span><br><span class="line"><span class="keyword">let</span> arr =[]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepTraversal</span>(<span class="params">tree</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">null</span>)&#123;</span><br><span class="line">        arr.push(tree);</span><br><span class="line">        <span class="keyword">let</span> child = tree.children;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; child.length; i++) &#123;</span><br><span class="line">            deepTraversal(child[i])        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">deepTraversal(tree)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// dfs 非递归</span></span><br><span class="line"><span class="keyword">let</span> arr = []; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepTraversal</span>(<span class="params">tree</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">let</span> stack = [];  </span><br><span class="line">        stack.push(tree);  </span><br><span class="line">        <span class="keyword">while</span> (stack.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> item = stack.pop();  </span><br><span class="line">            arr.push(item);  </span><br><span class="line">            <span class="keyword">let</span> children = item.children;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = children.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)  </span><br><span class="line">                stack.push(children[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;  </span><br><span class="line">deepTraversal(tree)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// bfs 非递归</span></span><br><span class="line"><span class="keyword">let</span> arr = []; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wideTraversal</span>(<span class="params">tree</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">let</span> queue = [];  </span><br><span class="line">        queue.unshift(tree);  </span><br><span class="line">        <span class="keyword">while</span> (queue.length != <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">let</span> item = queue.shift();  </span><br><span class="line">            arr.push(item);  </span><br><span class="line">            <span class="keyword">let</span> children = item.children;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++)  </span><br><span class="line">                queue.push(children[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line">wideTraversal(tree)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树的结点包含一个数据和多个指向子树的分支 结点拥有的子树的数量为结点的度，度为0的结点是叶结点，度不为0的结点为分支结点，树的度定义为树的所有结点中度的最大值。。。&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://adolfheir.github.io/categories/algorithm/"/>
    
    
      <category term="tree" scheme="https://adolfheir.github.io/tags/tree/"/>
    
      <category term="数据结构" scheme="https://adolfheir.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>hexo文档</title>
    <link href="https://adolfheir.github.io/2018/12/11/start/"/>
    <id>https://adolfheir.github.io/2018/12/11/start/</id>
    <published>2018-12-11T06:30:34.000Z</published>
    <updated>2019-08-22T13:51:13.382Z</updated>
    
    <content type="html"><![CDATA[<p>现在开始使用hexo 记录代码中不好记录的东西 …<br><a id="more"></a><br>现在开始使用hexo 记录代码中不好记录的东西</p><h2 id="头部信息"><a href="#头部信息" class="headerlink" title="头部信息"></a>头部信息</h2><p><a href="https://hexo.io/zh-cn/docs/variables.html#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F" target="_blank" rel="noopener">文章头部信息</a> 属性和属性值之间必须有一个空格，否则会解析错误 </p><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">layout</td><td style="text-align:center">布局</td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">标题</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">文件建立日期</td></tr><tr><td style="text-align:center">tags</td><td style="text-align:center">标签</td></tr><tr><td style="text-align:center">categories</td><td style="text-align:center">分类</td></tr></tbody></table><h2 id="创建新post"><a href="#创建新post" class="headerlink" title="创建新post"></a>创建新post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h2 id="生成并发布"><a href="#生成并发布" class="headerlink" title="生成并发布"></a>生成并发布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --deploy  //生成文章</span><br><span class="line">$ hexo clean  //清除缓存</span><br><span class="line">$ hexo deploy -g  //推送到git 需绑定ssh</span><br><span class="line">$ hexo server  //开启本地端口预览</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在开始使用hexo 记录代码中不好记录的东西 …&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="https://adolfheir.github.io/categories/others/"/>
    
    
      <category term="hexo" scheme="https://adolfheir.github.io/tags/hexo/"/>
    
      <category term="doc" scheme="https://adolfheir.github.io/tags/doc/"/>
    
      <category term="tool" scheme="https://adolfheir.github.io/tags/tool/"/>
    
  </entry>
  
</feed>
