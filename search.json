[{"title":"三方技术选型","url":"%2F2019%2F08%2F22%2F%E4%B8%89%E6%96%B9%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%2F","content":"\nweb开发实践中最佳三方库整理\n<!-- more -->\n每个轮子都有很多个实现，但是最好的就那几个，这边整理下遇到的react使用中最好的轮子。\n\n#### 编程环境\n\n| 分类         | 名称                   |\n| ------------ | ---------------------- |\n| 编辑器       | vscode，webstorem      |\n| 包管理       | yarn                   |\n| 基础框架     | react                  |\n| 其他常规内容 | webpack，babel，rollup |\n\n#### 组件\n\n| 分类         | 名称                                                         |\n| ------------ | ------------------------------------------------------------ |\n| 图形化       | echart(https://echarts.baidu.com/)                           |\n| 拖拽         | react-dnd<br />react-beautiful-dnd 偏应用层                  |\n| 代码编辑器   | *react-ace +* brace  首选底层ace<br />react-monaco-editor 调研中 底层monaco-editor<br />react-live 编辑+动态渲染方案<br />[react-json-view](https://github.com/mac-s-g/react-json-view)  json编辑器 |\n| 地图         | [react-amap](https://github.com/ElemeFE/react-amap)          |\n| 终端         | [xterm.js](https://github.com/xtermjs/xterm.js)              |\n| 富文本       | [braft-editor](https://github.com/margox/braft-editor)       |\n| 代码高亮     | [react-syntax-highlighter](https://github.com/conorhastings/react-syntax-highlighter) |\n| markdown渲染 | react-markdown                                               |\n| 无限滚动     | [React-window](https://github.com/bvaughn/react-window)      |\n| webide       | theia-ide                                                    |\n| 右键菜单     | [react-contexify](https://fkhadra.github.io/react-contexify/) |\n| 区域拖拽     | react-split-pane                                             |\n| 图片截选     | [react-image-crop](https://github.com/DominicTobias/react-image-crop) |\n| 趋势线       | [react-sparklines](https://github.com/borisyankov/react-sparklines) |\n| 搜索词高亮   | [react-highlight-words](https://github.com/bvaughn/react-highlight-words) |\n| 动效         | [react-spring](https://github.com/react-spring/react-spring) |\n| 取色版       | [react-color](http://casesandberg.github.io/react-color/)    |\n| 响应式支持   | [react-responsive](https://github.com/contra/react-responsive) |\n\n#### 工具\n\n| 分类             | 名称                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| css解决方案 | BEM+classname+sass                          |\n| 网络请求         | axios/fetch                                                  |\n| 基础工具库       | lodash                                                       |\n| 复制             | [react-copy-to-clipboard](https://github.com/nkbt/react-copy-to-clipboard) |\n| 页面meta属性     | [react-helmet](https://github.com/nfl/react-helmet)          |\n| 二维码           | [qrcode.react](https://github.com/zpao/qrcode.react)         |\n| 顶部进度条       | [nprogress](https://github.com/rstacruz/nprogress)           |\n| 时间处理         | moment                                                       |\n| 国际化           | [react-intl](https://github.com/yahoo/react-intl)            |\n| 文本输入优化     | [text-mask](https://github.com/text-mask/text-mask)          |\n| 路由处理         | *history*                                                    |\n| query string处理 | qs                                                           |\n| react属性校验    | *prop-types*                                                 |\n| 生成唯一uid      | [cuid](https://github.com/ericelliott/cuid)                  |\n| 数字处理         | [big.js](http://mikemcl.github.io/big.js/#abs)               |\n| json schema校验  | [ajv](https://github.com/epoberezkin/ajv)                    |\n| 计算最佳匹配工具 | [didyoumean.js](https://github.com/dcporter/didyoumean.js)   |\n| csv处理 | [react-csv](https://github.com/react-csv/react-csv) |\n| Base64处理 | [[js-base64](https://github.com/dankogai/js-base64)](https://github.com/dcporter/didyoumean.js) |\n| zip处理 | [jszip](https://github.com/Stuk/jszip) |\n| md5计算 | [browser-md5-file](https://github.com/forsigner/browser-md5-file) |\n| eccel处理 | [js-xlsx](https://github.com/SheetJS/js-xlsx) |\n\n\n#### \n\n\n","tags":["技术选型，react"],"categories":["others"]},{"title":"webpack添加版本号","url":"%2F2018%2F12%2F13%2Fwebpack%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E5%8F%B7%2F","content":"\nnode读取git的commit的版本号借助webpack来输出当前项目版本号\n<!-- more -->\n起因是公司使用自动化部署的时候不知道因为一些原因，不知道当前线上是否使用了最新版的前端代码.所以有一个给前端项目添加版本号的需求.于是就使用了webpack读取git的commit的版本号来输出当前项目版本号\n\n## 获取git信息\n\n百度了一波，直接用node 读当前项目的.git文件下的信息就好\n\n```javascript\n// 获取git版本\nlet getGitVersion = (() => {\n  let gitHEAD = fs.readFileSync('.git/HEAD', 'utf-8').trim() // ref: refs/heads/develop\n  let ref = gitHEAD.split(': ')[1] // refs/heads/develop\n  let develop = gitHEAD.split('/')[2] // 环境：develop\n  let gitVersion = fs.readFileSync('.git/' + ref, 'utf-8').trim() // git版本号，例如：6ceb0ab5059d01fd444cf4e78467cc2dd1184a66\n  let gitCommitVersion = '\"' + develop + ': ' + gitVersion + '\"' // 例如dev环境: \"develop: 6ceb0ab5059d01fd444cf4e78467cc2dd1184a66\"\n  return {\n    gitBranch: '\"' + develop + '\"',\n    gitVersion: '\"' + gitVersion + '\"'\n  }\n})()\n```\n\n## 使用webpack添加环境变量\n\n直接使用webpack自带的DefinePlugin 注入上面生成的version信息\n\n```javascript\n    new webpack.DefinePlugin({\n      \"process\": {\n        \"env\": { ...getGitVersion }\n      }\n    })\n```\n## 打印到控制台\n\n然后在项目入口文件 打印process 对象获取到的版本信息 (下面一些奇怪的东西是console美化)\n\n```javascript\nconsole.log(`%cGit_Branch:%c${process.env.gitBranch}`, \"color:orange;font-weight:bold;font-size:16px\", \"color:red;font-size:16px\")\nconsole.log(`%cGit_Version:%c${process.env.gitVersion}`, \"color:orange;font-weight:bold;font-size:16px\", \"color:red;font-size:16px\")\n```\n## 注意\n因为build的时候获取的版本号是当前这次的提交 所以如果build完提交后console的版本号就不是最后一次提交了,所以要不就线上build，不然就只能接受这个小瑕疵。\n\n\n","tags":["webpack"],"categories":["others"]},{"title":"数据结构-树","url":"%2F2018%2F12%2F11%2Ftree%2F","content":"\n树的结点包含一个数据和多个指向子树的分支 结点拥有的子树的数量为结点的度，度为0的结点是叶结点，度不为0的结点为分支结点，树的度定义为树的所有结点中度的最大值。。。\n \n<!-- more -->\n## 普通树\n\n### 树的概念\n\n#### 树的度\n\n树的结点包含一个数据和多个指向子树的分支 结点拥有的子树的数量为结点的度，度为0的结点是叶结点，度不为0的结点为分支结点，树的度定义为树的所有结点中度的最大值。\n\n#### 树的前驱和后继\n\n结点的直接后继称为结点的孩子，结点称为孩子的双亲。 结点的孩子的孩子称为结点的孙子，结点称为子孙的祖先。 同一个双亲的孩子之间互称兄弟。\n\n#### 树中结点的层次\n\n树中根结点为第1层，根结点的孩子为第2层，依次类推。 树中结点的最大层次称为树的深度或高度\n\n#### 树的有序性\n\n如果树中结点的各子树从左向右是有序的，子树间不能互换位置，则称该树为有序树，否则为无序树。 \n\n#### 森林\n\n森林是由n棵互不相交的树组成的集合。 三棵树组成的森林如下： \n\n### 树的遍历\n\n树的遍历分为递归和非递归广度优先   非递归深度优先\n\n```javascript\n// dfs 递归\nlet arr =[]\nfunction deepTraversal(tree){\n    if(tree != null){\n        arr.push(tree);\n        let child = tree.children;\n        for (let i = 0; i < child.length; i++) {\n            deepTraversal(child[i])        \n        }\n    }\n}\ndeepTraversal(tree)\nconsole.log(arr)\n// dfs 非递归\nlet arr = []; \nfunction deepTraversal(tree) {  \n    if (tree != null) {  \n        let stack = [];  \n        stack.push(tree);  \n        while (stack.length != 0) {\n            let item = stack.pop();  \n            arr.push(item);  \n            let children = item.children;  \n            for (let i = children.length - 1; i >= 0; i--)  \n                stack.push(children[i]);  \n        }  \n    }    \n}  \ndeepTraversal(tree)\nconsole.log(arr)\n// bfs 非递归\nlet arr = []; \nfunction wideTraversal(tree) {  \n    if (tree != null) {  \n        let queue = [];  \n        queue.unshift(tree);  \n        while (queue.length != 0) {  \n            let item = queue.shift();  \n            arr.push(item);  \n            let children = item.children;  \n            for (let i = 0; i < children.length; i++)  \n                queue.push(children[i]);  \n        }  \n    }  \n} \nwideTraversal(tree)\n```\n\n","tags":["数据结构"],"categories":["algorithm"]},{"title":"hexo文档","url":"%2F2018%2F12%2F11%2Fstart%2F","content":"\n现在开始使用hexo 记录代码中不好记录的东西 ...\n<!-- more -->\n现在开始使用hexo 记录代码中不好记录的东西\n\n## 头部信息\n\n[文章头部信息](https://hexo.io/zh-cn/docs/variables.html#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F) 属性和属性值之间必须有一个空格，否则会解析错误 \n\n|    变量    |     描述     |\n| :--------: | :----------: |\n|   layout   |     布局     |\n|   title    |     标题     |\n|    date    | 文件建立日期 |\n|    tags    |     标签     |\n| categories |     分类     |\n\n\n\n## 创建新post\n\n```bash\n$ hexo new [layout] <title>\n```\n\n\n\n## 生成并发布\n\n```bash\n$ hexo generate --deploy  //生成文章\n$ hexo clean  //清除缓存\n$ hexo deploy -g  //推送到git 需绑定ssh\n$ hexo server  //开启本地端口预览\n```","tags":["tool"],"categories":["others"]}]